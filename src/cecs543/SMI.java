/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cecs543;

import com.sun.rowset.internal.Row;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ankush
 */
public class SMI extends javax.swing.JPanel {

    public Integer visible=0;
    public DefaultTableModel model;
    public Integer RowCount;
    public Integer mTotal=0;
    public static int count=0;
    boolean[] canEdit;
    public FP fp;
    /**
     * Creates new form SMI
     */
    public SMI(FP fp) {
        initComponents();
        this.fp = fp;
        count = count+1;
        RowCount = -1;
        visible = 1;
        boolean[] canEdit = new boolean [] {
        false, true, true, true, false};
        model = (DefaultTableModel)jTable2.getModel();
                    
                    
    };
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        if (columnIndex == 0 || columnIndex == 4){
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnAddRow = new javax.swing.JButton();
        btnCI = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Software Maturity Index");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SMI", "Modules Added", "Modules Changed", "Modules Deleted", "Total Modules"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setToolTipText("");
        jTable2.getTableHeader().setResizingAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnCI.setText("Compute Index");
        btnCI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnAddRow)
                        .addGap(60, 60, 60)
                        .addComponent(btnCI)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddRow)
                    .addComponent(btnCI))
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        // TODO add your handling code here:
        
        model.addRow(new Object[]{});
        RowCount+=1;
        
    }//GEN-LAST:event_btnAddRowActionPerformed

    public void saveSMI(FileOutputStream fout, String name){
        String Newline = "\n";
        try{
                //Integer row = smi.jTable2.getRowCount();
                //Integer columns = smi.jTable2.getColumnCount();
                fout = new FileOutputStream(new File(name), true);
                //Integer TabCount = fp.TabbedPanel.getComponentCount();
//                fout.write(TabCount.toString().getBytes());
//                fout.write(Newline.getBytes());
                String nameC = this.getClass().getName();
                fout.write(nameC.getBytes());
                fout.write(Newline.getBytes());
                fout.write("SMI".getBytes());
                fout.write(Newline.getBytes());
                Integer row = this.jTable2.getRowCount();
                Integer columns = this.jTable2.getColumnCount();
                fout.write(row.toString().getBytes());
                fout.write(Newline.getBytes());
                fout.write(columns.toString().getBytes());
                fout.write(Newline.getBytes());
                Double value;
                for(int k=0;k<row;k++){
                    for(int j=0;j<columns;j++){
                        value = Double.parseDouble(this.jTable2.getValueAt(k, j).toString());
                        fout.write(value.toString().getBytes());
                        fout.write(Newline.getBytes());
                    }
                }
            }
            catch(Exception e){
                
            }
    }
    
    private void btnCIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCIActionPerformed
        // TODO add your handling code here:
        
        Integer mAdded= 0;
        Integer mChanged = 0;
        Integer mDeleted = 0;
        Double smi=0.0;
        if(RowCount==0){
            //mTotal =  Integer.parseInt(model.getValueAt(RowCount, 1).toString());
            mAdded =  Integer.parseInt(model.getValueAt(RowCount, 1).toString());
            mDeleted = Integer.parseInt(model.getValueAt(RowCount, 3).toString());
            mChanged = Integer.parseInt(model.getValueAt(RowCount, 2).toString());
            if(mAdded < 0 || mDeleted < 0 || mChanged < 0){
                JOptionPane.showMessageDialog(null, "Negative values are not allowed.");
            }
            else{
                mTotal = mAdded;
                mTotal = mTotal - mDeleted;
                if(mTotal < 0){
                    JOptionPane.showMessageDialog(null, "Modules Deleted cannot be greater than Total Modules");
                }
                else{
                    smi = (double)(mTotal - (mAdded + mChanged + mDeleted))/mAdded;
                    model.setValueAt(mTotal, RowCount, 4);
                    model.setValueAt(smi, RowCount,0);
                }
            }
        }
        else{
            mAdded =  Integer.parseInt(model.getValueAt(RowCount, 1).toString());    
            mDeleted = Integer.parseInt(model.getValueAt(RowCount, 3).toString());
            mChanged = Integer.parseInt(model.getValueAt(RowCount, 2).toString());
            if(mAdded < 0 || mDeleted < 0 || mChanged < 0){
                JOptionPane.showMessageDialog(null, "Negative values are not allowed.");
            }
            else {
                mTotal = (Integer)model.getValueAt(RowCount-1,4) + mAdded - mDeleted;
                if(mTotal < 0){
                    JOptionPane.showMessageDialog(null, "Modules Deleted cannot be greater than Total Modules");
                }
                else{
                    smi = (double)(mTotal - (mAdded + mChanged + mDeleted))/mTotal;
                    model.setValueAt(mTotal, RowCount, 4);
                    model.setValueAt(smi, RowCount,0);
                }
            }
        }
       
        
                
    }//GEN-LAST:event_btnCIActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
